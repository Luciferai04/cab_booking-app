user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  2048;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Docker DNS resolver; re-resolve every 30s; disable ipv6
    resolver 127.0.0.11 valid=30s ipv6=off;

    # Strict rate limit templates
    limit_req_zone $binary_remote_addr zone=api_zone:20m rate=5r/s;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Redirect all HTTP to HTTPS
    server {
        listen 80;
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name _;
        ssl_certificate     /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        http2 on;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header Referrer-Policy no-referrer-when-downgrade always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        # Content Security Policy (tune as needed for your frontend assets)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' data: https:; connect-src 'self' https: wss:; frame-ancestors 'none'; base-uri 'self'; form-action 'self'" always;

        client_max_body_size 1m;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        if ($request_method !~ ^(GET|POST|PUT|PATCH|DELETE|OPTIONS)$ ) { return 405; }

        # Upstream variables to defer DNS resolution until request time
        set $users_upstream users-service:4003;
        set $captains_upstream captains-service:4004;
        set $rides_upstream rides-service:4005;
        set $maps_upstream maps-service:4001;
        set $socket_upstream socket-service:4002;
        set $payments_upstream payments-service:4006;
        set $routing_upstream routing-service:4010;
        set $notification_upstream notification-service:4008;

        # Health
        location = /health { return 200 '{"status":"ok","service":"gateway"}'; add_header Content-Type application/json; }

        # Users/Captains/Rides services (apply generic rate limiting)
        location /users/ { 
            limit_req zone=api_zone burst=10 nodelay; 
            rewrite ^/users/(.*)$ /$1 break;
            proxy_pass http://$users_upstream; 
            proxy_set_header Host $host; 
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }
        location /captains/ { 
            limit_req zone=api_zone burst=10 nodelay; 
            rewrite ^/captains/(.*)$ /$1 break;
            proxy_pass http://$captains_upstream; 
            proxy_set_header Host $host; 
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }
        location /rides/ { 
            limit_req zone=api_zone burst=20 nodelay; 
            rewrite ^/rides/(.*)$ /$1 break;
            proxy_pass http://$rides_upstream; 
            proxy_set_header Host $host; 
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }
        location /payments/ { 
            limit_req zone=api_zone burst=10 nodelay; 
            rewrite ^/payments/(.*)$ /$1 break;
            proxy_pass http://$payments_upstream; 
            proxy_set_header Host $host; 
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }
        location = /health-backend { proxy_pass http://backend:3000/health; }

        # Maps service
        location /maps/ {
            rewrite ^/maps/(.*)$ /$1 break;
            proxy_pass http://$maps_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }

        # Socket service HTTP endpoints
        location /socket/ {
            rewrite ^/socket/(.*)$ /$1 break;
            proxy_pass http://$socket_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }

        # Routing service HTTP endpoints
        location /routing/ {
            rewrite ^/routing/(.*)$ /$1 break;
            proxy_pass http://$routing_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }

        # Notification service
        location /notification/ {
            rewrite ^/notification/(.*)$ /$1 break;
            proxy_pass http://$notification_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }

        # ML inference service
        location /ml/ {
            rewrite ^/ml/(.*)$ /$1 break;
            proxy_pass http://ml-inference-service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }

        # WebSocket upgrade for Socket.IO if needed at /socket.io/
        location /socket.io/ {
            proxy_pass http://$socket_upstream/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Correlation-Id $http_x_correlation_id;
        }
    }
}

